
;Assumes standard graph with nodes and edges with positive integer weights between them in
edges with "distance field" of type int;

fn dijkstra_insert_help_fields(node:Node)->Void{
	let visited:Boolean = false
	let distance_to:Int = -1
	node [+] visited
	node [+] distance_to
}

fn dijkstra_get_min_distance_node(graph:Graph)->Node{
	let min_distance:Int = -1
	let node_to_return:Node
	graph.find_many([visited = false]).each(node in
		{ if(node.distance != -1){
			minDistance = node.distance
			
		  }
		})
	return node_to_return
}

fn dijkstra_get_edge_weight(node_start:Node, node_end:Node)->Int{
	in

fn dijkstra_does_work(node:Node, graph:Graph)->Graph{
	if(node == Null){
		return graph
	}
	let base_distance:Int = node.distance
	graph.find_many(node, distance).each(neighbor_node in {
		let possible_new_distance:Int = node.distance + base_distance
		if(node.distance
	
}
	
fn dijkstra_main(node_distance_from:Node, graph:Graph)->Graph{
	graph.each(node in dijkstra_insert_help_fields(node))
	node.distance_to = 0;
	
	
	
