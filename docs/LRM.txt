n2n Reference Manual:1. Introduction: description of n2n:a. N2n is a computer language specific for coding graphs etc.2. Lexical conventions: a. Kinds of tokens (like identifiers, keyword, constants, strings, expression operators, and others)b. Blanks spaces signify end of identifiersc. Newlines indicate end of statementd. Tabs indicate ___e. Comments are ignored and are indicated by __2.1 Comments: The character ; introduces a comment, and ;; ends it 2.2 Identifiers: A sequence of letters and digits; the first character must be alphabetic. Upper and lower case letter are considered different. The underscore counts as alphabetic.To declare an identifier, use the “let” keyword followed by the identifier name, a colon, and then the identifier type. For example: let length: Int2.3 Keywords: The following identifiers are reserved for use as keywords and may not be used otherwise:Int                 1String              1Bool                1Double              1Data                1if                  1else                1let                 1Node (node type)    1fn                  1void                1true                1false               1return              1Bill(From scanner):null                1      2.3 Function keywords: (built-in function names)node() (constructor for node)       1rel()                               1ins()                               1rem()                               1  neighbors()                       1  addField()                        1	map(coll, fn)                   1     	reduce (coll, fn, init)     1       	each(coll,fn)               1     	filter(coll,pred)           1          	2.3 Constants: Several kinds of constants:     		2.3.1 Integer Constants- sequence of digits. Taken to be decimal always     		2.3.2 Double Constants – consists of integer part, decimal point, and fraction part. The integer and fractions part both consist of a sequence of digits. Either the integer part or the fraction part (not both) may be missing. The decimal point may also be missing.      	2.4 Strings: sequence of characters surrounded by double quotes     To print certain non-graphic characters, precede them with back-slash. These include: \” , \n , \t , \r , \\ , \;3. Syntax Notation (maybe unnecessary)4. What’s in a name? The type of the identifier determines the meaning of the values in the identifier’s storage. The location and lifetime of an identifier are determined by the scope in which it is declared. A function sets a scope for a variable so that any variable declared in a function only exists within that function and are discarded on return. Any variable declared outside functions are global and visible by the entire program, independent of any function. If a local variable shares its name with a global variable, the local variable (within the function) has precedence.  the location where it is declared. (copied from C manual – check to make sure this is true for us)     	n2n supports four fundamental types of objects: integers, double-precision floating-point numbers, booleans, and strings     		Integers (Int) are represented in 16-bit 2’s complement notation     		Double-precision floating-point (Double) quantities have magnitudes in the range approximately 10+-38 or 0; and a precision of 56 bits or about 17 decimal digits     		Booleans (Bool) can have only two values: true or false     		Strings are composed of characters chosen from ASCII set     	There are also derived types constructed from the fundamental types:     		Map – a key-value store where keys and values can be of any type (but all keys are of the same type and all values are of the same type)     		List – an ordered collection of elements where all elements are of the same type5. Objects and lvaluesa. An lvalue is an expression referring to an object such as an identifier. To assign lvalues, use the keyword “let” followed by the identifier name followed by a colon. Example: let graph: Graph6. Conversions7. Expressions8. Declarations9. Statements10. External definitions11. Scope rules12. Compiler control lines13. Implicit declarations14. Types revisited15. Constant expressions16. ExamplesOperators: include double quotesThings changed from proposal:Comments: ; to start and ;; to endBill: The comment actually start and ends with ; for now.In one example change Boolean to Bool5